//jooq설정 1: 버전 설정, 버전은 nu.studer.jooq와 org.springframework.boot:spring-boot-starter-jooq 에 종속된다.
buildscript {
    ext {
        jooqVersion = '3.19.10'
        postgresqlVersion = '42.2.23'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'nu.studer.jooq' version '9.0'  // JOOQ 코드 생성을 위한 플러그인
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //graphql
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation 'org.springframework:spring-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'  // for subscriptions

    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly  'org.projectlombok:lombok'
    testAnnotationProcessor  'org.projectlombok:lombok'

    //swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    //db
    runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"

    // JOOQ 의존성 추가
    implementation 'org.springframework.boot:spring-boot-starter-jooq'

//    jooqGenerator 'org.postgresql:postgresql'
    jooqGenerator project(':JOOQ-custom')
    jooqGenerator "org.jooq:jooq:${jooqVersion}"
    jooqGenerator "org.jooq:jooq-meta:${jooqVersion}"

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // testcontainers
//	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
//	testImplementation 'org.testcontainers:postgresql'
//	testImplementation 'org.testcontainers:junit-jupiter'
}

jooq {
    version.set("${jooqVersion}")

    configurations {
        kybexamDB {
            generationTool {
                jdbc {
                    driver = "org.postgresql.Driver"
                    // PostgreSQL URL 형식으로 변경
                    url = System.getenv("DB_URL") ?: "jdbc:postgresql://127.0.0.1:35432/kybexam"
                    user = System.getenv("DB_USER") ?: "myuser"
                    password = System.getenv("DB_PASSWORD") ?: "mypassword"
                }

                generator {
                    name = "org.jooq.codegen.DefaultGenerator" // Java 코드 생성기

                    database {
                        name = "org.jooq.meta.postgres.PostgresDatabase"
                        unsignedTypes = false
                        inputSchema = "public"  // 기본 스키마를 public으로 변경
                        includes = ".*"  // 모든 테이블 포함
                        excludes = "flyway_schema_history|spatial_ref_sys"  // 시스템 테이블 제외
                    }

                    // 생성된 코드 옵션
                    generate {
                        daos = true
                        records = true
                        fluentSetters = true
                        javaTimeTypes = true
                        deprecated = false
                        pojos = true  // POJO 생성 추가
                        interfaces = true  // 인터페이스 생성 추가


                        // Spring 관련 추가 설정
                        springDao = true          // Spring DAO 지원
                        springAnnotations = true // Spring 통합
                    }

                    target {
                        // 프로젝트의 기본 패키지 구조를 따르도록 수정
                        packageName = "org.hanumoka.sample.infrastructure.jooq.generated"
                        // 생성 위치를 build 디렉토리로 변경
                        directory = "build/generated-src/jooq/main"
                    }

                    // 사용자 정의 코드 생성기 추가
                    strategy.name = "jooq.custom.generator.JPrefixGeneratorStrategy"
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', "build/generated-src/jooq/main"]
        }
    }
}

// JOOQ 코드 생성이 컴파일 전에 실행되도록 설정
tasks.named('compileJava').configure {
    it.dependsOn(tasks.named('generateKybexamDBJooq'))
}

tasks.named('compileTestJava').configure {
    it.dependsOn(tasks.named('generateKybexamDBJooq'))
}

tasks.named('test') {
    useJUnitPlatform()
}
