package org.hanumoka.sample.mock.fake;

import org.hanumoka.sample.account.application.port.out.AccountRepository;
import org.hanumoka.sample.account.domain.Account;
import org.hanumoka.sample.account.presentation.rest.request.QueryAccountRequest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class FakeAccountRepository implements AccountRepository {

    private Long autoGeneratedId = 0L;
    private final List<Account> data = new ArrayList<>();

    private Long getAutoGeneratedId(){
        return ++autoGeneratedId;
    }

    @Override
    public Optional<Account> findById(Long accountId) {
        return data.stream().filter(item -> item.getId().equals(accountId)).findAny();
    }

    @Override
    public Optional<Account> findByUsername(String username) {
        return data.stream().filter(item -> item.getUsername().equals(username)).findAny();
    }

    @Override
    public Optional<Account> findByAccountUuid(String accountUuid) {
        return data.stream().filter(item -> item.getAccountUuid().equals(accountUuid)).findAny();
    }

    @Override
    public Page<Account> getPage(Pageable pageable, QueryAccountRequest queryAccountRequest) {
        return null;
    }

    @Override
    public Account save(Account account) {
        if(account.getId() == null || account.getId() == 0){

            Account newAccount = Account.builder()
                    .id(getAutoGeneratedId())
                    .username(account.getUsername())
                    .accountUuid(account.getAccountUuid())
                    .name(account.getName())
                    .age(account.getAge())
                    .gender(account.getGender())
                    .status(account.getStatus())
                    .roles(account.getRoles())
                    .build();

            data.add(newAccount);
            return newAccount;
        }else{
            data.removeIf(item -> item.getId().equals(account.getId()));
            data.add(account);
            return account;
        }
    }

    @Override
    public Long createAccount(Account domain) {
        return 0L;
    }

    @Override
    public Long updateAccount(Account domain) {
        return 0L;
    }

    @Override
    public Long deleteAccount(Account domain) {
        return 0L;
    }

}
